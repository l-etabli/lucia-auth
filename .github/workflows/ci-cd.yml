name: CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  project_name: ${{ github.event.repository.name }}
  npm_scope: ${{ github.repository_owner }}

jobs:
  validations:
    name: Validations
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v2
      - name: Install dependencies
        run: bun install
      - name: Fullcheck 
        run: bun run fullcheck
      
      - if: github.ref == 'refs/heads/main'
        name: Build package
        run: bun run build
      - if: github.ref == 'refs/heads/main'
        name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: dist
          key: ${{ github.sha }}-build
  
  check-if-version-upgraded:
    name: Check if version upgraded
    runs-on: ubuntu-latest
    needs: validations
    if: github.ref == 'refs/heads/main'
    outputs:
      new_version: ${{ steps.check-if-version-upgraded.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '22'
      - name: Read version from package.json
        id: package-json
        run: 
          echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Read latest version on npm
        id: npm-latest
        run: echo "version=$(npm view @${{ env.npm_scope }}/${{ env.project_name }} version)" >> $GITHUB_OUTPUT
      
      - name: Check if version upgraded and set output to version if so
        id: check-if-version-upgraded
        run: |
          if [ "${{ steps.package-json.outputs.version }}" != "${{ steps.npm-latest.outputs.version }}" ]; then
            echo "new_version=${{ steps.package-json.outputs.version }}" >> $GITHUB_OUTPUT
            echo "Version upgrade detected: ${{ steps.package-json.outputs.version }} (current) vs ${{ steps.npm-latest.outputs.version }} (npm)"
          else
            echo "No version upgrade. Latest is ${{ steps.npm-latest.outputs.version }}"
          fi

  create-tag:
    name: Create version tag
    runs-on: ubuntu-latest
    needs: check-if-version-upgraded
    if: github.ref == 'refs/heads/main' && needs.check-if-version-upgraded.outputs.new_version != ''
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "github-actions@github.com"
      - name: Create tag on repo
        run: |
          VERSION_TAG="v${{ needs.check-if-version-upgraded.outputs.new_version }}"
          echo "Creating tag $VERSION_TAG"
          git tag $VERSION_TAG
          git push origin $VERSION_TAG

  create-release:
    name: Create release
    runs-on: ubuntu-latest
    needs: [check-if-version-upgraded, create-tag]
    if: github.ref == 'refs/heads/main' && needs.check-if-version-upgraded.outputs.new_version != ''
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ needs.check-if-version-upgraded.outputs.new_version }}"

  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [check-if-version-upgraded, create-tag]
    if: github.ref == 'refs/heads/main' && needs.check-if-version-upgraded.outputs.new_version != ''
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org'
          scope: '@${{ env.npm_scope }}'

      - name: Verify NPM access
        run: npm whoami
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Restore build artifacts
        uses: actions/cache@v4
        with:
          path: dist  # Adjust this to your build output directory
          key: ${{ github.sha }}-build
      
      - name: Publish to NPM
        run: npm publish --access=public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  
